#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

# Function to display the help message
show_help() {
    echo "Usage: $0 [-r depth] <server_ip> or $0 [-r depth] <file_with_ips>"
    echo "       $0 <server_ip> [-s <search_term>]"
    echo ""
    echo "Options:"
    echo "  -r depth     Recursively search directories up to the specified depth."
    echo "  -s, --search Search for a specific file (case-insensitive) in shares."
    echo "  -h, --help   Show this help message and exit."
    echo ""
    echo "Examples:"
    echo "  $0 192.168.20.153"
    echo "  $0 -r 2 192.168.20.153"
    echo "  $0 192.168.20.153 -s password"
    echo "  $0 -r 1 ips.txt"
    echo ""
    echo "Description:"
    echo "This script connects to SMB shares on a specified server (or list of servers)"
    echo "and lists the directories within those shares. It can optionally recurse"
    echo "into subdirectories up to a specified depth or search for a specific file."
}

# Function to check read and write access on the share
check_access() {
    local share="$1"
    local server="$2"

    # Check for read access
    smbclient "//$server/$share" -U "$USER%$PASSWORD" -m SMB2 -c 'ls' &>/dev/null
    if [ $? -eq 0 ]; then
        local read_access="Yes"
    else
        local read_access="No"
    fi

    # Check for write access in a protected directory
    local write_test_dir="ProtectedDirTest"
    local write_test_file="testfile.txt"

    smbclient "//$server/$share" -U "$USER%$PASSWORD" -m SMB2 -c "mkdir $write_test_dir" &>/dev/null
    if smbclient "//$server/$share/$write_test_dir" -U "$USER%$PASSWORD" -m SMB2 -c "put /dev/null $write_test_file && rm $write_test_file && rmdir $write_test_dir" &>/dev/null; then
        local write_access="Yes"
    else
        local write_access="No"
    fi

    echo "$read_access,$write_access"
}

# Function to recursively search for a file and display in Windows format
search_files_recursive() {
    local share="$1"
    local search_term="$2"
    local output_file="$3"
    local depth="$4"

    echo -e "\e[34mSearching in $share for \"$search_term\"...\e[0m" | tee -a "$output_file"

    smbclient "//$SERVER/$share" -U "$USER%$PASSWORD" -m SMB2 -c "recurse; prompt OFF; ls" | grep -i "$search_term" | \
    awk -v ip="$SERVER" -v share="$share" '{print "\\\\" ip "\\" share "\\" $0}' | tee -a "$output_file"
}

# Function to process each share
list_folders() {
    local share="$1"
    local output_file="$2"
    local depth="$3"

    echo -e "\e[34mConnecting to $share...\e[0m" | tee -a "$output_file"

    smbclient "//$SERVER/$share" -U "$USER%$PASSWORD" -m SMB2 -c "recurse; ls" | tee -a "$output_file"

    # Check access rights and append to summary CSV.
    local access_info
    access_info=$(check_access "$share" "$SERVER")
    echo "$SERVER,$share,$access_info" >> "$summary_csv"
}

# Function to process each IP
process_ip() {
    local SERVER="$1"
    local depth="${2:-0}"
    local search_term="${3:-}"
    local output_file="sharelist_scan_results/scan_results_$SERVER.txt"
    local temp_output_file
    temp_output_file=$(mktemp)

    echo -e "\e[32mScanning $SERVER...\e[0m"

    # Test the connection and check for authentication errors
    if ! smbclient -L "//$SERVER" -U "$USER%$PASSWORD" -m SMB2 &>/dev/null; then
        echo -e "\e[31mError: Authentication failed for $SERVER. Please check your username and password.\e[0m"
        return
    fi

    # List shares and filter out unnecessary lines and those with a '$'
    local shares
    shares=$(smbclient -L "//$SERVER" -U "$USER%$PASSWORD" -m SMB2 2>/dev/null | grep "Disk" | grep -v '\$' | awk '{print $1}')

    # Check if any shares were found
    if [ -z "$shares" ]; then
        echo -e "\e[31mNo non-administrative shares found on $SERVER. This could be due to incorrect authentication.\e[0m"
        return
    fi

    echo -e "\e[32mAvailable non-administrative shares on $SERVER:\e[0m" | tee -a "$temp_output_file"
    echo "$shares" | tee -a "$temp_output_file"

    local share_found=false

    # Connect to each share and either list folders or search for a file
    for share in $shares; do
        if [ -n "$search_term" ]; then
            search_files_recursive "$share" "$search_term" "$temp_output_file" "$depth" | grep -v "NT_STATUS_ACCESS_DENIED" || echo -e "\e[31mAccess denied for $share, skipping...\e[0m"
        else
            list_folders "$share" "$temp_output_file" "$depth" | grep -v "NT_STATUS_ACCESS_DENIED" || echo -e "\e[31mAccess denied for $share, skipping...\e[0m"
        fi
        share_found=true
    done

    if [ "$share_found" = true ]; then
        echo -e "\e[32mFinished checking all shares on $SERVER.\e[0m" | tee -a "$temp_output_file"
        mv "$temp_output_file" "$output_file"
    else
        rm "$temp_output_file"
    fi
}

# Main script logic

# Check if no arguments or help flag is provided
if [ -z "${1:-}" ] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Parse the arguments for recursive depth or search term
depth=0
search_term=""
ip=""
if [[ "$1" == "-r" ]]; then
    if [ -z "${2:-}" ] || ! [[ "$2" =~ ^[0-9]+$ ]]; then
        echo -e "\e[31mError: Please provide a valid depth value after -r.\e[0m"
        show_help
        exit 1
    fi
    depth="$2"
    shift 2
fi

if [[ "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    ip="$1"
    shift
else
    echo -e "\e[31mError: Invalid IP address or file path.\e[0m"
    show_help
    exit 1
fi

if [[ "${1:-}" == "-s" ]] || [[ "${1:-}" == "--search" ]]; then
    search_term="$2"
    shift 2
fi

# Create the output directory if it doesn't exist
output_dir="sharelist_scan_results"
mkdir -p "$output_dir"

# Initialize the summary CSV file
summary_csv="$output_dir/share_summary.csv"
echo "IP,Share,Read Access,Write Access" > "$summary_csv"

# Server login information
USER="domain.local\\lteale"
read -s -p "Enter SMB password: " PASSWORD
echo

# Check if the argument is a file or an IP
if [ -f "$ip" ]; then
    # Process each IP in the file
    while IFS= read -r SERVER; do
        SERVER=$(echo "$SERVER" | xargs)
        if [ -n "$SERVER" ]; then
            process_ip "$SERVER" "$depth" "$search_term"
        fi
    done < "$ip"
else
    # Process a single IP
    SERVER="$ip"
    process_ip "$SERVER" "$depth" "$search_term"
fi

# Read the summary CSV file to build the table
declare -a summary_table
while IFS=, read -r ip share read_access write_access; do
    summary_table+=("$ip" "$share" "$read_access" "$write_access")
done < <(tail -n +2 "$summary_csv")

# Print the table
echo -e "\nSummary of Available Shares:"
printf "%-15s %-20s %-15s %-15s\n" "IP" "Share" "Read Access" "Write Access"
printf "%-15s %-20s %-15s %-15s\n" "---" "-----" "-----------" "------------"
for ((i = 0; i < ${#summary_table[@]}; i += 4)); do
    printf "%-15s %-20s %-15s %-15s\n" "${summary_table[i]}" "${summary_table[i+1]}" "${summary_table[i+2]}" "${summary_table[i+3]}"
done

# Check if any results were found
if grep -q "$search_term" "$output_dir/scan_results_$SERVER.txt"; then
    echo -e "\nFiles or folders found with the search term \"$search_term\":"
    grep -i "$search_term" "$output_dir/scan_results_$SERVER.txt"
else
    echo -e "\nNo files or folders found using the search term \"$search_term\"."
fi

echo -e "\nResults saved to: $summary_csv"
